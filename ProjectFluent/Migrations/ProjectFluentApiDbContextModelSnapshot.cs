// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectFluent.DB;

#nullable disable

namespace ProjectFluent.Migrations
{
    [DbContext(typeof(ProjectFluentApiDbContext))]
    partial class ProjectFluentApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProjectFluent.Model.Department", b =>
                {
                    b.Property<Guid>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeptId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ProjectFluent.Model.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EmpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<string>("SecondaryContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TmId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DtId");

                    b.HasIndex("EmpId")
                        .IsUnique()
                        .HasFilter("[EmpId] IS NOT NULL");

                    b.HasIndex("TmId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProjectFluent.Model.EmployeeAddress", b =>
                {
                    b.Property<Guid>("EmplId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmplId");

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("ProjectFluent.Model.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgLang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("DepartId");

                    b.HasIndex("EmplyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectFluent.Model.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ProjectFluent.Model.Employee", b =>
                {
                    b.HasOne("ProjectFluent.Model.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DtId");

                    b.HasOne("ProjectFluent.Model.EmployeeAddress", "Address")
                        .WithOne("Employee")
                        .HasForeignKey("ProjectFluent.Model.Employee", "EmpId");

                    b.HasOne("ProjectFluent.Model.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TmId");

                    b.Navigation("Address");

                    b.Navigation("Department");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectFluent.Model.Project", b =>
                {
                    b.HasOne("ProjectFluent.Model.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartId");

                    b.HasOne("ProjectFluent.Model.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmplyId");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ProjectFluent.Model.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectFluent.Model.Employee", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectFluent.Model.EmployeeAddress", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectFluent.Model.Team", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
